"""
'r'：只读模式。如果文件不存在，会引发 FileNotFoundError。这是默认模式。
'w'：写入模式。如果文件存在，会被清空。如果文件不存在，会创建一个新文件。
'x'：独占创建模式。如果文件已存在，会引发 FileExistsError。如果文件不存在，会创建一个新文件。
'a'：追加模式。如果文件存在，数据会被追加到文件的末尾。如果文件不存在，会创建一个新文件。
'b'：二进制模式。与其他模式结合使用，如 'rb'、'wb'、'ab'、'xb'。
't'：文本模式。与其他模式结合使用，如 'rt'、'wt'、'at'、'xt'。这是默认模式。
'+'：更新模式。与其他模式结合使用，如 'r+'、'w+'、'a+'、'x+'，可以同时进行读写操作
"""

"""
文本模式（'t'）：在读取和写入时，Python 会自动处理平台特定的行结束符。
    例如，在 Unix/Linux 中，行结束符是 \n，而在 Windows 中，行结束符是 \r\n。
    当你在文本模式下读取或写入文件时，Python 会自动将这些行结束符转换为 \n。
    同样，当你写入文件时，Python 会将 \n 转换为平台特定的行结束符。
    这意味着，当你在文本模式下读取或写入文件时，你看到的都是处理过的文本数据，而不是原始的二进制数据。  
二进制模式（'b'）：
    在读取和写入时，Python 不会进行任何处理，你将直接读取或写入文件的原始二进制数据。这对于所有非文本文件（如图像、音频、视频等）都是必需的。
"""
with open("../.gitignore", "r") as file:
    print(type(file))
    """
    1. read(size=-1)：读取并返回文件中的一定数量的字符。如果 size 参数为负数或省略，那么会读取并返回文件中剩余的所有内容。  
    2. readline(size=-1)：读取并返回文件中的一行。如果 size 参数为负数或省略，那么会读取并返回整行内容。
        如果 size 参数为正数，那么会读取并返回该行中的前 size 个字符。  
    3. readlines(hint=-1)：读取并返回文件中的所有行，结果是一个列表，每个元素是一行的内容。
        如果 hint 参数为负数或省略，那么会读取并返回文件中剩余的所有行。如果 hint 参数为正数，那么会读取并返回直到总字符数达到 hint 为止的行
    """
    print(file.read())  # r (read mode)
